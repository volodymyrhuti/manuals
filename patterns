                                    Patterns
=========================================================================================================
Decomposing code is a hallmark of object-oriented programming. The subject of design patterns is concerned
with finding good ways to achive code-reuse. Broadly speaking, design patterns are grouped into: creational,
structural, and behavioral patterns. Many specific patterns are very natural - strategy objects, adapters,
builders, ets., appear in a number of places in out codebase.
=========================================================================================================
                                     SFINAE
=========================================================================================================


=========================================================================================================


https://blogs.msdn.microsoft.com/willy-peter_schaub/2010/10/12/unisa-chatter-design-patterns-in-c-part-11-patterns-singleton-versus-monostate/
https://stackoverflow.com/questions/720744/static-class-and-singleton
https://stackoverflow.com/questions/624653/is-monostate-the-good-cousin-of-the-evil-singleton
https://stackoverflow.com/questions/887317/monostate-vs-singleton
https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Resource_Return
https://cpppatterns.com/patterns/virtual-constructor.html
PIMPL
named parameter idiom
The Curiously Recurring Template Pattern (CRTP)
