=========================================================================================================
                                 Macro pitfalls
=========================================================================================================
Macro definitions do not have to have balanced parentheses. By writing an unbalanced open parenthesis in
a macro body, it is possible to create a macro call that begins inside the macro body but ends outside of
it. For example,

#define strange(file) fprintf (file, "%s %d",
…
strange(stderr) p, 35)
     → fprintf (stderr, "%s %d", p, 35)

The ability to piece together a macro call can be useful, but the use of unbalanced open parentheses in
a macro body is just confusing, and should be avoided. 
---------------------------------------------------------------------------------------------------------
Operator Precedence Problems

#define square(a) a * a
int z = square(x + y) * 2  ==>
int z = x + y * x + y * 2  ==>
    z = x + (y * x) + y * 2
---------------------------------------------------------------------------------------------------------
Swallowing the Semicolon

It is common to write some loop as macro, but macro looks like function therefore it is less ambiguos and
more readable to finish call to it with semicolon, like `find_smth_in_arr(arr,smth);`. Now it is question
how to properly write this macro definition. For instance
#define SKIP_SPACES(p, limit)  \
{ char *lim = (limit);         \
  while (p < lim) {            \
    if (*p++ != ' ') {         \
      p--; break; }}}
This looks correct and will works with semicollon and without, but what if we put it under if, like
if (true)
    SKIP_SPACES(p,limit);
else
    ...
Here, column will finish if statement and leave standalone if, which is an error. There are two solutions:
don`t use if without {} braces, which may go against code style, or maybe you don`t like how it looks;
you can rewrite macro using do{}while(0)
#define SKIP_SPACES(p, limit)     \
do { char *lim = (limit);         \
     while (p < lim) {            \
       if (*p++ != ' ') {         \
         p--; break; }}}          \
while (0)
---------------------------------------------------------------------------------------------------------
Function call side effects

Note, if you pass function call as one of the parameters to macro, it is not executed before replacing
therefore you will have a call for each symbol substitution, resulting in side efects
#define min(X, Y)  ((X) < (Y) ? (X) : (Y))
min (x, foo(x)) ==> ( x < foo(x) ? x : foo(x))
Workaround, provide additional variables that hold result of possible expressions, like
#define min(X, Y)                \
({ typeof (X) x_ = (X);          \
   typeof (Y) y_ = (Y);          \
   (x_ < y_) ? x_ : y_; })
Note, that operators like typeof are not always present
---------------------------------------------------------------------------------------------------------
Self referential macros

If macros refences itself, it is expanded only once, therefore macros like
#define foo (4 + foo) expands to (4 + foo), where foo is a simple symbol, like a variable

If a macro x expands to use a macro y, and the expansion of y refers to the macro x, that is an indirect
self-reference of x. x is not expanded in this case either. Thus, if we have
#define x (4 + y)
#define y (2 * x)
then x and y expand as follows:
x    ==> (4 + y)
     ==> (4 + (2 * x))
y    ==> (2 * x)
     ==> (2 * (4 + y))
---------------------------------------------------------------------------------------------------------
Newlines in Arguments

Macross expansion results in one line, therfore if you split call into multiple, compiler/debugger may provide
missleading line information
macro_call( arg1,     <== compiler will point here
            arg2,
            error );  <== but error is here

https://gnu.huihoo.org/gcc/gcc-7.1.0/cpp/Macro-Pitfalls.html#Macro-Pitfalls
=========================================================================================================
                                     Vararg
=========================================================================================================
C has mechanism to pass variable length list of parameter to function. Such function takes list lenght
as the first parameter and elipsis as the second.
void func(int length, ...) { ... }

Reasons to avoid it:
1. Type checking is suspended.
   You can call func(5, 1, 1.1, 'c' ...) which may result in undefined behaviour. Most likely, you will
   cast all variables to one type, like int, without noticing.
2. You should mannualy count arguments. Possible solutions:
   Passing sential and performing while(true) around it.
   Passing some kind of data encoding type and order of following parameters.
   Mannually counting and passing number of arguments.

https://www.learncpp.com/cpp-tutorial/714-ellipsis-and-why-to-avoid-them/
=========================================================================================================
                   Zero-length arrays in C | Flexible arrays
=========================================================================================================
Zero-length array is a way to have array members but didn`t want to have to decleare the size upfront.
Initially there was a trick with using a length 1 array and overalocating
struct name {
    int namelen;
    char namestr[1];
};
struct name *makename(char *newname)
{
    struct name *ret =
        malloc(sizeof(struct name)-1 + strlen(newname)+1);
                /* -1 for initial [1]; +1 for \0 */
    if(ret != NULL) {
        ret->namelen = strlen(newname);
        strcpy(ret->namestr, newname);
    }

    return ret;
}
Despite its popularity, the technique is also somewhat notorious: Dennis Ritchie has called it
``unwarranted chumminess with the C implementation,''. It is considered a hack because it either complicates
the call to malloc, or wastes space. Therefore, GCC offered a language extension with array of size 0.
Then in C99 it was made even simpler, since you could define them without size like
`char name[];` This lets you to issue only one malloc to allocate structure and offload, like:

struct str *var = malloc(sizeof(struct str) + extra_payload);

There are a few restrictions on flexible array members that ensure that code using them makes sense.
For example, there must be at least one other member, and the flexible array must occur last
Note, otherwise, zero length array is makes behaviour undefined, but if use it like `char name[];`
compiler will warn you about this.

One advantage is data locality, all members and array are saved continiously, ortherwise you would have
pointer for array, and data is allocated somewhere on heap, far from other fields. You could go around
by allocationg struct + payload in one malloc, like
struct name {
    int namelen;
    char *namep;
};
struct name *makename(char *newname)
{
    char *buf = malloc(sizeof(struct name) +
                strlen(newname) + 1);
    struct name *ret = (struct name *)buf;
    ret->namelen = strlen(newname);
    ret->namep = buf + sizeof(struct name);
    strcpy(ret->namep, newname);

    return ret;
}
However, piggybacking a second region onto a single malloc call like this is only portable if the second
region is to be treated as an array of char. For any larger type, alignment (see questions 2.12 and 16.7)
becomes significant and would have to be preserved.

https://stackoverflow.com/questions/14643406/whats-the-need-of-array-with-zero-elements
https://shivankaul.com/blog/c/languages/coding/bug/2017/07/03/zero-length-arrays.html
http://c-faq.com/struct/padding.html 2.12
http://c-faq.com/strangeprob/ptralign.html 16.7
http://c-faq.com/struct/structhack.html
=========================================================================================================
                                   Alignment
=========================================================================================================
Align M down to the closest multiple of power of N
  size_t size = ALIGN_UP(MAX(ARENA_BLOCK_SIZE, min_size), ARENA_ALIGNMENT);
  #define ALIGN_DOWN(n, a) ((n) & ~((a) - 1))
  #define ALIGN_UP(n, a) ALIGN_DOWN((n) + (a) - 1, (a))

In case N is multiple of 2 => ~(N-1) will give all uper bits including bit currently set to 1 `M+N-1` will
go over current request and in case result is power of 2 will decrese it by 1 so pool is not too big.

===============================================================================================================
