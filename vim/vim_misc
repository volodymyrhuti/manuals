                                Plugin Managers
=========================================================================================================
                                    Vim-plug
---------------------------------------------------------------------------------------------------------
+ Parallel update procedure for Vim with any of +ruby, +python, or Neovim
  Sequential otherwise
+ Lazy loading 
+ Install/Update plugins
+ Review/rollback updates
+ Supports OSX, Linux, Windows
+ Post-update hooks, eg recompile some package
- Changes some vim defaults which you migh find surprising/confusing
  https://github.com/junegunn/vim-plug/issues/379

To start using it:
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

-------------------------------------------------------------------------------
Aadd following to vimrc:
call plug#begin()
Plug 'git_user/repo'                                     " simple loading
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }   " on-demand loading
call plug#end()

Then issue :PlugInstall to install plugins. These are installed into directory specified within begin call
call plug#begin('~/.config/vim/bundle')

---------------------------------------------------------------------------------------------------------
                                    Pathogen
---------------------------------------------------------------------------------------------------------
+ The simplest `plugin manager` (runtimepath manager), requiring only one function call
+ Autoload plugis from a folder
+ Generate help tags for those plugins
- Everything else done mannually: installing/updating/removing
- No lazy loading

mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

-------------------------------------------------------------------------------
Modify your .vimrc
call pathogen#infect()   " plugins are loaded from ~/vim/bundle
call pathogen#helptags() " optional, otherwise issue :Helptags

Note, :Helptags is an upgraded :helptags which doesn`t require being in the plugin directory for generation
---------------------------------------------------------------------------------------------------------
                                     Vundle
---------------------------------------------------------------------------------------------------------
- Much more complex plugin manager
+ search a plugin index
+ update plugins
+ generate helptags automatically
+ keep, but not use, plugins in the autoload folder
+ clean out such unused plugins
+ Works on Linux, OSX, and MS Windows
- No lazy loading

git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
-------------------------------------------------------------------------------
Modify your .vimrc

set rtp+=~/.vim/bundle/Vundle.vim       " set the runtime path to include Vundle and initialize
call vundle#begin()
Plugin 'gmarik/Vundle.vim'              " let Vundle manage Vundle, required
call vundle#end()                       " required
filetype plugin indent on               " required

Then issue :PluginInstall from .vim
---------------------------------------------------------------------------------------------------------
                                   NeoBundle
---------------------------------------------------------------------------------------------------------
- Fork of Vundle with additional features, development has been stopped

- Lazy loading
---------------------------------------------------------------------------------------------------------
https://junegunn.kr/2014/07/vim-plugins-and-startup-time/
https://vi.stackexchange.com/questions/388/what-is-the-difference-between-the-vim-plugin-managers
=========================================================================================================
                              Color Managment
=========================================================================================================
Highlight current line
highlight CursorLine   cterm=NONE ctermbg=DarkGrey ctermfg=NONE guibg=NONE guifg=NONE

Highlight current column
highlight CursorColumn cterm=NONE ctermbg=DarkGrey ctermfg=NONE guibg=NONE guifg=NONE

=========================================================================================================
                                      Git
=========================================================================================================
                                      Diff
---------------------------------------------------------------------------------------------------------
You can look though file history with `:Glog` which will automatically load history to qfix buffer.
You can iterate through commits, which will update current buffer to state it was durring commit.
If you want to get history of all files/commits, issue `:Glog --`

There is an option to compare current buffer (for isntance, from Glog) with working copy, this is done
with `:Gdiff` without arguments. Or you can specify revision to compare against with `Gdiff <rev>` like
`Gdiff HEAD`. Don`t forget, there are couple variants of diff, depenging on window orientation
`Gvdiff` splits  vertically, and `Gdiff` splits horizontally.

To avoid iterating though qfix buffer, you can specify how many commits before to compare against
`:Gdiff ~3`

Random examples:
Gdiff branch_name:path/to/dir/filename.txt

https://stackoverflow.com/questions/15369499/how-can-i-view-git-diff-for-any-commit-using-vim-fugitive
---------------------------------------------------------------------------------------------------------
                              Using vimmerge tool
---------------------------------------------------------------------------------------------------------
You can start vimmerge with git mergetool -t vimdiff. By default it has next layout
+--------------------------------+
| LOCAL  |     BASE     | REMOTE |
+--------------------------------+
|             MERGED             |
+--------------------------------+
Where =>
LOCAL  => a temporary file containing the contents of the file on the current branch.
BASE   => a temporary file containing the common base for the merge.
REMOTE => a temporary file containing the contents of the file to be merged.
MERGED =>
The file containing the conflict markers. Git has performed as much automatic conflict resolution as
possible and the state of this file is a combination of both LOCAL and REMOTE with conflict markers
surrounding anything that Git could not resolve itself. The mergetool should write the result of the
resolution to this file.

A script for somewhat better layout can be found here
https://vim.fandom.com/wiki/A_better_Vimdiff_Git_mergetool

---------------------------------------------------------------------------------------------------------
                               Working with diffs
---------------------------------------------------------------------------------------------------------
Vimdiff control:
:diffupdate     | re-scan the files for differences
]c              | next difference
[c              | perv difference
do              | diff obtain
dp              | diff put
zX              | refold diff

Turn vimdiff for opened buffers
:windo diffthis
:EnhancedDiff patience
:windo diffoff

git difftool --no-index dir1 dir2

https://devhints.io/vim-diff
https://gist.github.com/mattratleph/4026987
=========================================================================================================
